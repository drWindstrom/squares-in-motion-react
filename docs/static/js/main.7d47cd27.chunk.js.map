{"version":3,"sources":["squares-store.ts","sidebar-inputs.tsx","utils.ts","origin-svg.tsx","square-svg.tsx","pan-zoom-svg.tsx","App.tsx","index.tsx"],"names":["initialSquares","squaresReducer","squares","action","type","map","square","n","spinningNumber","rotation","changed","isHighligted","isSelected","x","delta","y","Error","toggleHighlightSquare","lastT","intervalId","undefined","fpsList","SidebarInputs","dispatch","useState","sideLength","setSideLength","squaresNumber","setSquaresNumber","setSpinningNumber","requestedFps","setRequestedFps","lastFrameFps","setLastFrameFps","stopSpinning","clearInterval","distance","averageFps","subsetSize","length","summer","acc","current","sum","reduce","Math","round","lastItems","slice","id","htmlFor","name","defaultValue","onChange","e","Number","target","value","onClick","squaresPerRow","sqrt","nextSquares","row","ceil","toString","push","createSquares","setInterval","performance","now","t","diff","frameFps","measureFps","rotateSquares","invertYAxis","p","OriginSvg","origin","size","strokeWidth","markerSize","xArrow","yArrow","xLabel","yLabel","invOrigin","viewBox","refX","refY","markerWidth","markerHeight","orient","d","stroke","fill","markerStart","markerEnd","SquareSvg","onMouseEnter","onMouseLeave","onMouseDown","strokeColor","cursorStyle","center","width","height","rx","ry","cursor","transform","PanZoomSvg","viewportWidth","setViewportWidth","viewportHeight","setViewportHeight","zoom","isSquareDrag","setIsSquareDrag","finishingDrag","setFinishingDrag","lastMousePosition","setLastMousePosition","svgEl","useRef","useEffect","updateSvgViewportSize","clientWidth","clientHeight","window","addEventListener","removeEventListener","handleWindowMouseUp","viewBoxMinY","viewboxWidth","viewboxHeight","clientToSvgCoordinates","CTM","getScreenCTM","mousePos","clientX","a","clientY","f","squareItems","stopPropagation","handleSquareClick","button","handleSquareMouseDown","ref","version","xmlns","onMouseMove","preventDefault","mousePosition","deltaX","deltaY","handleSvgMouseMove","handleSvgClick","App","useReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d47cd27.chunk.js","sourcesContent":["import { Square } from \"./types/types\";\n\nexport const initialSquares: Square[] = [];\n\nexport type ActionType = \n  | { type: \"SET\"; squares: Square[] }\n  | { type: \"ROTATE\"; spinningNumber: number }\n  | { type: \"TOGGLE_HIGHLIGHT\"; changed: Square }\n  | { type: \"TOGGLE_SELECT\"; changed: Square }\n  | { type: \"DESELECT_ALL\" }\n  | { type: \"TRANSLATE_SELECTED_SQUARES\"; delta: {x: number, y: number} }\n\nexport function squaresReducer(squares: Square[], action: ActionType) {\n  switch (action.type) {\n    case \"SET\": {\n      return action.squares;\n    }\n\n    case \"ROTATE\": {\n      const nextSquares = squares.map((square, n) => {\n        if (n < action.spinningNumber) {\n          square = { ...square, rotation: square.rotation + 1 };\n        }\n        return square;\n      });\n      return nextSquares;\n    }\n\n    case \"TOGGLE_HIGHLIGHT\": {\n      const nextSquares = squares.map((square) => {\n        if (square === action.changed) {\n          square = { ...square, isHighligted: !square.isHighligted };\n        }\n        return square;\n      });\n      return nextSquares;\n    }\n\n    case \"TOGGLE_SELECT\": {\n      const nextSquares = squares.map((square) => {\n        if (square === action.changed) {\n          square = { ...square, isSelected: !square.isSelected };\n        }\n        return square;\n      });\n      return nextSquares;\n    }\n\n    case \"DESELECT_ALL\": {\n      const nextSquares = squares.map((square) => {\n        return { ...square, isSelected: false };\n      });\n      return nextSquares;\n    }\n\n    case \"TRANSLATE_SELECTED_SQUARES\": {\n      const nextSquares = squares.map((square) => {\n        if (square.isSelected) {\n          square = {\n            ...square,\n            x: square.x + action.delta.x,\n            y: square.y - action.delta.y,\n          };\n        }\n        return square;\n      });\n      return nextSquares;\n    }\n\n    default:\n      throw new Error();\n  }\n}\n\n// Action creators\nexport function setSquares(squares: Square[]): ActionType {\n  return {\n    type: \"SET\",\n    squares: squares,\n  };\n}\n\nexport function rotateSquares(spinningNumber: number): ActionType {\n  return {\n    type: \"ROTATE\",\n    spinningNumber: spinningNumber,\n  };\n}\n\nexport function toggleHighlightSquare(square: Square): ActionType {\n  return {\n    type: \"TOGGLE_HIGHLIGHT\",\n    changed: square,\n  };\n}\n\nexport function toggleSelectSquare(square: Square): ActionType {\n  return {\n    type: \"TOGGLE_SELECT\",\n    changed: square,\n  };\n}\n\nexport function deselectAllSquares(): ActionType {\n  return {\n    type: \"DESELECT_ALL\",\n  };\n}\n\nexport function translateSelectedSquares(delta: {x: number, y: number}): ActionType {\n  return {\n    type: \"TRANSLATE_SELECTED_SQUARES\",\n    delta: delta,\n  };\n}","import React, { useState } from \"react\";\nimport { Square } from \"./types/types\";\nimport { ActionType, setSquares, rotateSquares } from \"./squares-store\";\n\ntype SidebarInputsProps = {\n  dispatch: React.Dispatch<ActionType>;\n};\n\nlet lastT = 0;\nlet intervalId: NodeJS.Timeout | undefined = undefined;\nlet fpsList: number[] = [];\n\nfunction SidebarInputs({ dispatch }: SidebarInputsProps) {\n  const [sideLength, setSideLength] = useState(40);\n  const [squaresNumber, setSquaresNumber] = useState(100);\n  const [spinningNumber, setSpinningNumber] = useState(0);\n  const [requestedFps, setRequestedFps] = useState(30);\n  const [lastFrameFps, setLastFrameFps] = useState(0);\n\n  function handleStartButtonClick() {\n    fpsList = [];\n    createSquares();\n    stopSpinning();\n\n    if (spinningNumber > 0) {\n      intervalId = setInterval(() => {\n        measureFps();\n        dispatch(rotateSquares(spinningNumber));\n      }, 1000 / requestedFps);\n    }\n  }\n\n  function stopSpinning() {\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = undefined;\n    }\n  }\n\n  function handleStopButtonClick() {\n    stopSpinning();\n  }\n\n  const distance = 1.75 * sideLength;\n\n  function createSquares() {\n    const squaresPerRow = Math.round(Math.sqrt(squaresNumber));\n    const nextSquares = [];\n    for (let n = 1; n <= squaresNumber; n++) {\n      const row = Math.ceil(n / squaresPerRow);\n      const colum = n - (row - 1) * squaresPerRow;\n      const x = distance * colum;\n      const y = distance * row;\n      const square: Square = {\n        id: n.toString(),\n        x,\n        y,\n        sideLength,\n        rotation: 0,\n        isHighligted: false,\n        isSelected: false,\n      };\n      nextSquares.push(square);\n    }\n    dispatch(setSquares(nextSquares));\n  }\n\n  function measureFps() {\n    // Check whether this is the first run\n    if (lastT === 0) {\n      lastT = performance.now();\n      return;\n    }\n    const t = performance.now();\n    const diff = t - lastT;\n    const frameFps = Math.round(1000 / diff);\n    setLastFrameFps(frameFps);\n    fpsList.push(frameFps)\n    // Save current time stamp for next run\n    lastT = t;\n  }\n\n  function averageFps(subsetSize: number = 0) {\n    \n    if (fpsList.length === 0 || fpsList.length < subsetSize) {\n      return 0;\n    }\n\n    const summer = (acc: number, current: number) => acc + current;\n    if (subsetSize === 0) {\n      const sum = fpsList.reduce(summer);\n      return Math.round(sum / fpsList.length);\n    } else {\n      const lastItems = fpsList.slice(fpsList.length - subsetSize);\n      const sum = lastItems.reduce(summer);\n      return Math.round(sum / lastItems.length); \n    }\n  }\n\n  return (\n    <div id=\"sidebar-inputs\">\n      <label htmlFor=\"side-length\">Side length:</label>\n      <input\n        type=\"number\"\n        id=\"side-length\"\n        name=\"side-length\"\n        defaultValue={sideLength}\n        onChange={(e) => setSideLength(Number(e.target.value))}\n      />\n      <label htmlFor=\"num-squares\">Number of squares:</label>\n      <input\n        type=\"number\"\n        id=\"num-squares\"\n        name=\"num-squares\"\n        defaultValue={squaresNumber}\n        onChange={(e) => setSquaresNumber(Number(e.target.value))}\n      />\n      <label htmlFor=\"num-spinning\">Number spinning:</label>\n      <input\n        type=\"number\"\n        id=\"num-spinning\"\n        name=\"num-spinning\"\n        defaultValue={spinningNumber}\n        onChange={(e) => setSpinningNumber(Number(e.target.value))}\n      />\n      <label htmlFor=\"req-fps\">Frames per sec:</label>\n      <input\n        type=\"number\"\n        id=\"req-fps\"\n        name=\"req-fps\"\n        defaultValue={requestedFps}\n        onChange={(e) => setRequestedFps(Number(e.target.value))}\n      />\n      <div>\n        <button onClick={handleStartButtonClick}>Start</button>\n        <button onClick={handleStopButtonClick}>Stop</button>\n      </div>\n      <p>Last frame: {lastFrameFps} fps</p>\n      <p>Last 30 frames: {averageFps(30)} fps</p>\n      <p>All frames: {averageFps()} fps</p>\n    </div>\n  );\n}\n\nexport default SidebarInputs;\n","import { Point, Vector } from \"./types/types\";\n\nexport function invertYAxis(p: Point): Point {\n  return { x: p.x, y: -p.y };\n}\n\nexport function getVec(p1: Point, p2: Point): Vector {\n  return {\n    x: p2.x - p1.x,\n    y: p2.y - p1.y,\n  };\n}\n\nexport function vectorMagnitude(vec: Vector): number {\n  return Math.sqrt(vec.x * vec.x + vec.y * vec.y);\n}\n\nexport function dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\nexport function angleBetweenVectors(a: Vector, b: Vector): number {\n  const angle = Math.acos(\n    dotProduct(a, b) / (vectorMagnitude(a) * vectorMagnitude(b))\n  );\n  console.log(`Angle: ${angle}`);\n  return angle;\n}\n\nexport function scalarProjection(vec: Vector, direction: Vector): number {\n  const angle = angleBetweenVectors(vec, direction);\n  return Math.cos(angle) * vectorMagnitude(vec);\n}\n\nexport function distance(p1: Point, p2: Point): number {\n  return vectorMagnitude(getVec(p1, p2));\n}\n","import React from \"react\";\nimport { Point } from \"./types/types\";\nimport { invertYAxis } from \"./utils\";\n\ntype OriginProps = {\n  origin: Point;\n  size: number;\n  strokeWidth: number;\n};\n\nfunction OriginSvg({ origin, size, strokeWidth }: OriginProps) {\n  const markerSize = 3 * strokeWidth;\n  let xArrow = { x: origin.x + size, y: origin.y };\n  let yArrow = { x: origin.x, y: origin.y + size };\n  let xLabel = { x: xArrow.x - 4 * markerSize, y: xArrow.y - 3 * markerSize };\n  let yLabel = { x: yArrow.x - 3 * markerSize, y: yArrow.y - 4 * markerSize };\n  // Invert y-axis\n  xArrow = invertYAxis(xArrow);\n  yArrow = invertYAxis(yArrow);\n  xLabel = invertYAxis(xLabel);\n  yLabel = invertYAxis(yLabel);\n  const invOrigin = invertYAxis(origin);\n\n  return (\n    <g>\n      <marker\n        id=\"arrow\"\n        viewBox=\"0 0 10 10\"\n        refX=\"5\"\n        refY=\"5\"\n        markerWidth={markerSize}\n        markerHeight={markerSize}\n        orient=\"auto-start-reverse\"\n      >\n        <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n      </marker>\n      <path\n        d={`M ${yArrow.x} ${yArrow.y} \n            L ${invOrigin.x} ${invOrigin.y} \n            L ${xArrow.x} ${xArrow.y}`}\n        stroke=\"black\"\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerStart=\"url(#arrow)\"\n        markerEnd=\"url(#arrow)\"\n      />\n      <text x={xLabel.x} y={xLabel.y}>\n        X\n      </text>\n      <text x={yLabel.x} y={yLabel.y}>\n        Y\n      </text>\n    </g>\n  );\n}\n\nexport default OriginSvg;\n","import React from \"react\";\nimport { invertYAxis } from \"./utils\";\nimport { Square } from \"./types/types\";\n\ntype SquareProps = {\n  square: Square;\n  onMouseEnter: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n  onMouseLeave: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n  onClick: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n  onMouseDown: (e: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n};\n\nfunction SquareSvg({\n  square,\n  onMouseEnter,\n  onMouseLeave,\n  onClick,\n  onMouseDown,\n}: SquareProps) {\n  // Default style\n  let strokeColor = \"black\";\n  let strokeWidth = \"0\";\n  let cursorStyle = \"grab\";\n  if (square.isHighligted && !square.isSelected) {\n    // Highlighted only\n    strokeColor = \"rgb(85,160,185)\";\n    strokeWidth = \"2\";\n  } else if (square.isSelected && !square.isHighligted) {\n    // Selected only\n    strokeColor = \"rgb(175,35,95)\";\n    strokeWidth = \"2\";\n  } else if (square.isSelected && square.isHighligted) {\n    // Highlighted and selected\n    strokeColor = \"rgb(175,35,95)\";\n    strokeWidth = \"2\";\n    cursorStyle = \"move\";\n  }\n\n  const center = invertYAxis({ x: square.x, y: square.y });\n\n  return (\n    <rect\n      x={-square.sideLength / 2}\n      y={-square.sideLength / 2}\n      width={square.sideLength}\n      height={square.sideLength}\n      rx={square.sideLength / 10}\n      ry={square.sideLength / 10}\n      stroke={strokeColor}\n      strokeWidth={strokeWidth}\n      cursor={cursorStyle}\n      transform={`translate(${center.x} ${center.y}) rotate(${square.rotation})`}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n    ></rect>\n  );\n}\n\nexport default SquareSvg;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { Square } from \"./types/types\";\nimport OriginSvg from \"./origin-svg\";\nimport SquareSvg from \"./square-svg\";\nimport {\n  ActionType,\n  toggleHighlightSquare,\n  toggleSelectSquare,\n  deselectAllSquares,\n  translateSelectedSquares,\n} from \"./squares-store\";\n\ntype PanZoomSvgProps = {\n  squares: Square[];\n  dispatch: React.Dispatch<ActionType>;\n};\n\nfunction PanZoomSvg({ squares, dispatch }: PanZoomSvgProps) {\n  //const [viewBoxMinX, setViewBoxMinX] = useState(0);\n  //const [viewBoxMinY, setViewBoxMinY] = useState(0);\n  const [viewportWidth, setViewportWidth] = useState(0);\n  const [viewportHeight, setViewportHeight] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const [isSquareDrag, setIsSquareDrag] = useState(false);\n  const [finishingDrag, setFinishingDrag] = useState(false);\n  const [lastMousePosition, setLastMousePosition] = useState({ x: 0, y: 0 });\n\n  const svgEl = useRef<SVGSVGElement>(undefined!);\n\n  useEffect(() => {\n    // Get viewport size after initial render and update on resize of the window\n    function updateSvgViewportSize() {\n      setViewportWidth(svgEl.current.clientWidth);\n      setViewportHeight(svgEl.current.clientHeight);\n    }\n\n    updateSvgViewportSize();\n    window.addEventListener(\"resize\", updateSvgViewportSize);\n\n    return () => window.removeEventListener(\"resize\", updateSvgViewportSize);\n  }, []);\n\n  useEffect(() => {\n    // Set event listener for mouseUp on windows to stop the dragging of squares\n    function handleWindowMouseUp() {\n      if (isSquareDrag) {\n        setIsSquareDrag(false);\n        setFinishingDrag(true);\n      }\n    }\n    window.addEventListener(\"mouseup\", handleWindowMouseUp);\n\n    return () => window.removeEventListener(\"mouseup\", handleWindowMouseUp);\n  }, [isSquareDrag]);\n\n  const VIEW_BOX_OFFSET = 50;\n  const viewBoxMinX = -VIEW_BOX_OFFSET;\n  const viewBoxMinY = -viewportHeight + VIEW_BOX_OFFSET;\n\n  const viewboxWidth = viewportWidth / zoom;\n  const viewboxHeight = viewportHeight / zoom;\n\n  function handleSquareMouseEnter(changed: Square) {\n    dispatch(toggleHighlightSquare(changed));\n  }\n\n  function handleSquareMouseLeave(changed: Square) {\n    dispatch(toggleHighlightSquare(changed));\n  }\n\n  function handleSquareClick(\n    e: React.MouseEvent<SVGRectElement, MouseEvent>,\n    changed: Square\n  ) {\n    // Prevent the click event after dragging a square\n    if (finishingDrag) {\n      setFinishingDrag(false);\n      e.stopPropagation();\n      return;\n    }\n    // Regular click to select the square\n    e.stopPropagation();\n    dispatch(toggleSelectSquare(changed));\n  }\n\n  function handleSquareMouseDown(\n    e: React.MouseEvent<SVGRectElement, MouseEvent>,\n    changed: Square\n  ) {\n    const MAIN_BUTTON = 0;\n    if (changed.isSelected && e.button === MAIN_BUTTON) {\n      e.stopPropagation();\n      setIsSquareDrag(true);\n      setLastMousePosition(clientToSvgCoordinates(e));\n    }\n  }\n\n  function clientToSvgCoordinates(e: React.MouseEvent<SVGElement, MouseEvent>) {\n    const CTM = svgEl.current.getScreenCTM();\n    const mousePos = { x: 0, y: 0 };\n    if (CTM) {\n      mousePos.x = (e.clientX - CTM.e) / CTM.a;\n      mousePos.y = (e.clientY - CTM.f) / CTM.d;\n    }\n    return mousePos;\n  }\n\n  function handleSvgClick(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\n    const MAIN_BUTTON = 0;\n    if (e.button === MAIN_BUTTON) {\n      dispatch(deselectAllSquares());\n    }\n  }\n\n  function handleSvgMouseMove(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n    // Throttle\n    // if(Date.now() - this.lastUpdate < 1000/30) {\n    //   return;\n    // }\n    // this.lastUpdate = Date.now();\n    // Dragging a square\n    if (isSquareDrag) {\n      const mousePosition = clientToSvgCoordinates(e);\n      const deltaX = mousePosition.x - lastMousePosition.x;\n      const deltaY = mousePosition.y - lastMousePosition.y;\n      // Translate squares\n      dispatch(translateSelectedSquares({x: deltaX, y: deltaY}));\n      // Save last mouse position\n      setLastMousePosition(mousePosition);\n    }\n  }\n\n  const squareItems = squares.map((square) => (\n    <SquareSvg\n      square={square}\n      onMouseEnter={() => handleSquareMouseEnter(square)}\n      onMouseLeave={() => handleSquareMouseLeave(square)}\n      onClick={(e) => handleSquareClick(e, square)}\n      onMouseDown={(e) => handleSquareMouseDown(e, square)}\n      key={square.id}\n    ></SquareSvg>\n  ));\n\n  return (\n    <svg\n      ref={svgEl}\n      version=\"1.1\"\n      width=\"100%\"\n      height=\"100%\"\n      viewBox={`${viewBoxMinX} ${viewBoxMinY} ${viewboxWidth} ${viewboxHeight}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      onMouseMove={(e) => handleSvgMouseMove(e)}\n      onClick={(e) => handleSvgClick(e)}\n    >\n      <OriginSvg origin={{ x: 0, y: 0 }} size={100} strokeWidth={2}></OriginSvg>\n      {squareItems}\n    </svg>\n  );\n}\n\nexport default PanZoomSvg;\n","import React, { useReducer } from \"react\";\nimport \"./sidebar-inputs\";\nimport SidebarInputs from \"./sidebar-inputs\";\nimport './pan-zoom-svg';\nimport PanZoomSvg from \"./pan-zoom-svg\";\nimport {initialSquares, squaresReducer} from './squares-store';\n\nfunction App() {\n  const [squares, dispatch] = useReducer(squaresReducer, initialSquares);\n  \n  return (\n    <div id='squares-in-motion'>\n      \n      <SidebarInputs\n        dispatch={dispatch}\n      ></SidebarInputs>\n           \n      <PanZoomSvg \n        squares={squares}\n        dispatch={dispatch}\n      ></PanZoomSvg>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}